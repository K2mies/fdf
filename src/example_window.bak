/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   example_window.c                                   :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rhvidste <rhvidste@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/20 14:52:05 by rhvidste          #+#    #+#             */
/*   Updated: 2025/01/21 11:57:08 by rhvidste         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

# include <stdlib.h>
# include <stdio.h>
# include <unistd.h>
# include "MLX42/MLX42.h"
# define WIDTH 256
# define HEIGHT 256

// Exit the program as falure
static void	ft_error(void)
{
	fprintf(stderr, "%s", mlx_strerror(mlx_errno));
	exit(EXIT_FAILURE);
}

// Print the window width and height
static void	ft_hook(void *param)
{
	const mlx_t* mlx = param;
	printf("WIDTH: %d | HEIGHT: %d\n", mlx->width, mlx->height);
}

int32_t main(void)
{
	// MLX allows you to define its core behaviour before startup.
	mlx_set_setting(MLX_MAXIMIZED, true);
	mlx_t* mlx = mlx_init(WIDTH, HEIGHT, "42Balls", true);
	if (!mlx)
		ft_error();

	/* Do stuff */

	// Create and display the image
	mlx_image_t* img = mlx_new_image(mlx, 256, 256);
	if (!img || (mlx_image_to_window(mlx, img, 0, 0) < 0))
		ft_error();

	// Even after the image is being displayed, we can still modify the buffer
	//mlx_put_pixel(img, 0, 0, 0xFF0000FF);

	int	i = 0;
	int	j = 0;
	while (i < WIDTH)
	{	
		j = 0;
		while (j < HEIGHT)
		{
			mlx_put_pixel(img, i, j, 0x0000FFFF);
			j++;
		}
		i++;
	}
	//mlx_put_pixel(img, 0, 0, 0x18255B);
	// Register a hook and pass mlx as an optional param
	//NOTE: Do this before calling mlx_loop!
	mlx_loop_hook(mlx, ft_hook, mlx);
	mlx_loop(mlx);
	mlx_terminate(mlx);
	return (EXIT_SUCCESS);
}
